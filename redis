Install redis in ubuntu:
	sudo apt update
	sudo apt install redis
	systemctl status redis-service
work with server		-> sudo systemctl status redis. [status,start,stop,enable,disable,restart]	
check version			-> redis-cli --version
check redis server		-> redis-server
port and host of redis-cli	-> redis-cli -h host -p port -a password
for CLI				-> redis-cli , GUI: redis-insight
Redis data-type			-> 1)string. 2)lists. 3)sets. 4)sotedsets. 5)Hashes. 6)streams. 7)
ConfigCommands			->
					config get *		: get all config settings.
					config get requirepass	: get specific config settings.
					config set requirepass value: set specific config settings.
type				-> check , types of keys.
String Dtypes Command		->			
				set	-> set key and value (set keyname value).(set keyname:key value)-(set student:1 nitin)
				get	-> get value form key (get keyname).
				del	-> delete key	(del keyname).
				exists	-> check key exists or not (exists keyname).
				keys *	-> print all keys.
				expire	-> set expire in second in key. (expire keys timeinsecond).
				rename	-> rename of key. (rename oldkeyname newkeyname).
				ttl 	-> check key , when will be expire. (ttl keyname).
				strlen	-> get length of key.	(strlen keyname).
				setnx	-> create key but setnx will not be override if key exits. but set do. (setnx keyname keyvalue).
				flushall-> delete all keys. (flushall).
				mset	-> set multiple key and value at a time.(mset keyname value keyname value.........keyname value).
				setex	-> set key and value with expire time.(setex keyname timeinsecond value).
				psetex	-> set key and value but time will give in milisecond. (psetex keyname timeinmilisecond value).
				decr	-> decrease the value of key. (decr keyname).
				incrby	-> increase the value of key by given value. (incrby keyname incrementvalue).
				decrby	-> decrease the value of key by given value. (decrby keyname decrementvalue).
				append	-> add new word in string in value of key. (append keyname appendingstring).
				
List Dtypes command		->
				lpush	-> make list and insert value in list.single or multiple value. (lpush keylistname valueoflist).
					   always lastvalue insert on head.
				lrange	-> print the value of list. (lrange keylistname startrange stoprange).
				lpop	-> remove first element in list . (lpop keylistname).
				llen	-> get the count of list value. (llen keylistname).
				lindex	-> check , value is on which index. (lindex keylistname valuename).
				lset	-> set value in list on specific index. (lset keylistname indexposition value).index should be exists.
				lpushx	-> push multiple value in if exists list. (lpushx keylistname value).
				linsert	-> push data in list after the specific value. (linsert keylistname after existsvalue newvalue).
		Note-: diff between lpush and rpush . lpush insert first value on bottom but rpush insert first value on head.(l and r).

Sets Dtypes command		->
				sadd	 -> make a key of set . (add keysetname member.....).
				smembers -> print value of set using key. (smembers keysetname ).
				scard	 -> check length of keys .
				srem	 -> remove member(value) from keys. (srem keysetname member.....).
				sdiff	 -> get diffrence of sets. (sdiff firstsetkey secondsetkey).
				sunion	 -> get a union of two set. (sunion firstsetkey secondsetkey).
				sinter	 -> get a intersection of two set. (sinter firstsetkey secondsetkey).
				
Hash Dtypes command		->
				hset	 -> set hash. (hset keyhashname field value field value ......field value)
				hget	 -> get hash value using field . (hget keyhashname field).
				hgetall	 -> print all field and value. (hgetall keyhashname ).
				hexists	 -> check in hash field is avaible. (hexists keyhashname field).
				hsetnx	 -> set field ,if field will be then it will not do override. (hsetnx keyhashname field value).
				hkeys	 -> get keys. (hkeys keyhashname).
				hvals	 -> get values. (hvals keyhashname).
				hmget	 -> get values of multiple fields. (hmget keyhashname field field....field).

Redis Pub/Sub			-> This is asynchronous messaging service.It can be used realtime messaging and chat ,new update,alert,
                                iotdevice, loadbalancing, online gaming , live streaming.
                                
                                Types of model-:
                                	i) one-to-one (one publisher and one subscriber).
                                	ii) one-to-many (one publisher and many subscriber).
				 	iii) many-to-one (many publisher and one subscriber).
				 	iv) many-to-many (many publisher and many subscriber).
				 	
				 1)publisher. 2)subsciber. 3)channel. 4)message. 5)broker.
				 
		Commands-: 
			subscribe 	-> make channel . (subscribe channelName).
			publish		-> send message to channel. (publish channelName yourmessages).
			pubsub channels	-> check active channels. (pubsub channels).
			pubsub numsub	-> see how many subscriber in channel. (pubsub numsub channelname).
			punsubscribe	-> 	
			unsubscribe	-> 
			psubscribe	->
			
Redis persistence		->Persistence refers to the writing of data to durable storage,such as solid-state dist(SSD).Redis provides
                                  range of persistence options .These include.
				1) No persistence.
                                2) RDB(redis database).
                                3) AOF(Append only file).
                                4) RDB+AOF.
                                
                                
                              	1)NoPer-> if we want to that data not be persistence then we can change, because redis bydefult be true.
                              	   goto (/etc/redis/redis.conf) and open and do uncomment save. then data will not persitence.(snapshotting).
                              	
                              	2)RDB-> set persistence in second. (save timeinsecond howmanytimesnap).  write in redis.conf.
                              		check the persistence-: (config get save).
                        		This setting by default provide redis installation time.
                        		Snap store in this location-: (/etc/lib/redis/dump.rdb).
                              	
                              	3)AOF-> if you want to use this mode . first stop RDB mode and then set (appendonly yes). basically appendonly
                              		bydefault value no. after that you will show (appendonlydir) directory in (/var/lib/redis) location.

Redis Cluster with real world	->
				This is same as masterslave-replication . but here we can make multiple master and multiple slave.
				create a folder any name and within folder we can create multiple folder according to master and slave.
				and create (redis.conf) then write configuration in file.given below.
				
											(port 7000
											cluster-enabled yes
											cluster-config-file nodes.conf
											cluster-node-timeout 5000
											appendonly yes)
											
				Copy redis.conf in all master and slave folder(node). and change port for diffrent nodes.
				then run redis.conf  with this cmd(redis-server redis.conf) on diffrent-2 terminal.
				then make cluster.given code below.  
				
						(redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 \
						127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 \
						--cluster-replicas 1)
						
				If we want to see master and slave ,user cmd: (cluster slots).
				see cluster info : (cluster info).
				
				check how many master cluster in redis check on terminal : (redis-cli -p 7004 cluster nodes |grep master).
				see all nodes       : (redis-cli -p portnumber(7000) cluster nodes).
				see all master node : (redis-cli -p portnumber(7000) cluster nodes | grep master).
				
				(create-cluster start,   create-cluster create ,create-cluster stop).
				
Redis MasterSlave-Replication 	->***I will read this after some time.
				For making exact copy of master is call master replication.if master link breack for connect that time ,it 
				  will automatically create replica(copy of instance).
				  A master can have multiple replica slave.Replica are able to connect from others replica.
				  
				  Note-: persistence should be ON in master and replica.
				  
Redis Sentinal			->***I will read this after some time.
				
				
				
				
				
