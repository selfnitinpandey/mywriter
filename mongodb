							MongoDB

insertOne 	-> insert one value.
insertMany	-> insert many value.
find		-> find all value.  add projection that means which field data will be show or not. (1,0).
findOne		-> find one value.
$eq		-> = operator.
$gt		-> greater than operator (>).
$gte		-> greater than = operator (>=).
$lt		-> less than operator	(<).
$lte		-> less than = operator	(<=).
$ne		-> not = operator (!=).
$nin		-> not in operator. for this operator needs array.
$and 		-> and operator, define condition in array.
$or		-> or operator, define condition in array.
$nor		-> nor operator,any value should not be match.
$not		-> not operator,check value not equal to.
$expr		-> expression operator, make express using more operator and condition for log query.
$mod		-> get value using using reminder value.{$mod:[5,1]}, 5 is divided value from field ,and 1 should be come as a reminder.
$regex		-> regular expression operator. find using regex pattern.
updateOne	-> update one value.
updateMany	-> update many value.
replaceOne	-> replace new value.
new Date	-> get date.
$unset		-> unset operator, remove any field in the document. work with updateOne or many.
$rename		-> rename operator, change any key name in document, work with updateOne or many.
$inc		-> increment operator. increment(+) and decrement(-) value ,work with updateOne or many.
$min,$max	-> get minimun and maximum value.  work with updateone or many.
$mul		-> multiplication operator  , work with updateone or many.
$		-> positional operator. work with array. means update any value we can update easly.specialy for array.
$[]		-> update all ,positional operator. we can use here arrayFilters and pass the element.
arrayFilters	-> return array filtering using condition and it will pass in $[] this operator.this depend on $[elem] operator.
$addToSet	-> update the value if value not present in the array.
$pop		-> remove first for(1) and last for (-1) element in the array . work with update.
$pull		-> remove value from array if matched. work with update.
$pullAll	-> remove multiple value given by you. work with update.
$push		-> insert value in array. work with update.
$each		-> insert multiple value in array at a time . first use $push then with $each . work with update.
$position	-> set position in array when updating data. $push,$each,$position. work with update.
$slice		-> set limit store value in array.
$sort		-> sorting array element in (asc 1)(desc -1). work with find.
$elemMatch	-> match element or multiple element in array for find. work with find.
deleteOne	-> delete data from collection.
deleteMany	-> delete many data from collection.
createCollection	-> createCollection in database.
getCollectionNames	-> get all collections names.
drop		-> delete collection by name.
pretty		-> show data in good formate.
count		-> get number of documents.
Date()		-> Utc timezone. (Indian standard time).
new Date()	-> ISO timezone.

$type		-> check type of field or array with type code.
				1: Double (64-bit floating point)	2: String
				3: Object				4: Array
				5: Binary data				6: Undefined (deprecated)
				7: ObjectId				8: Boolean
				9: Date					10: Null
				11: Regular Expression			13: JavaScript
				16: 32-bit Integer			17: Timestamp
				18: 64-bit Integer			127: Max Key
				255: Min Key
date-types	-> 	
			String: 	Stores text data.
			Integer: 	Stores whole numbers.
			Double: 	Stores floating-point numbers.
			Boolean: 	Stores true or false values.
			Object: 	Stores embedded documents.
			Array: 		Stores ordered lists.
			Object ID : 	Stores a 12-byte unique identifier.
			Date: 		Stores a date and time.
			Null: 		Stores a null value.
			RegExp: 	Stores regular expression patterns.
			Binary Data: 	Stores binary data.
			Symbol: 	Deprecated in recent versions of MongoDB.
			JavaScript: 	Stores JavaScript code.
			32-bit Integer: Stores 32-bit whole numbers.
			Timestamp: 	Stores a timestamp.
			64-bit Integer: Stores 64-bit whole numbers.
			Min Key: Represents the smallest possible key.
			Max Key: Represents the largest possible key.

indexing 	->
			-: collection are not sorted document.when we does create index then it will be sort then we can apply binary search.
			and then when we search then that perform as a binary search. because binary search is fast linear search.
			and also does store pointer of data.
			
			types of seaches:
					1) collectionscan	2)index scan
			types of indexes:
					1) single index. 2)compound index. 3)multikey index.(on array takes more space). 4)text index.
			
			explain()			-> get explanation of any query.
			explain('executionStats')	-> get explanation of query with executionStats fields.
			explain('allPlansExecution')	-> get explantion of query with executionstats and rejectedPlans,winningPlans Fields.
			createIndex({'field':1})	-> create index , (1) for sort in asending order.
			getIndexes()			-> see all indexes of collections.
			dropIndex('indexname')		-> delete index.
			{unique:true}			-> when we create index then use this so that index can be unique.
			{partialFilterExpression:{}}	-> create index and filter as an condition on that field.
			{expireAfterSeconds}		-> create index for specific time.
			$text and $search		-> text for text indexing and search for search word. if use - before text means
							   that that word not be included. 
			
aggregation	->
			-:db.collection.aggregate(pipeline,options).
			To write aggregate query means pipeline operation.
			Pipeline is array of diffrent operation.
			
			operator-:
				$match		-> Match value and find.
				$group		-> for group the date with condition.
						db.stu.aggregate([{$group:{_id:"$age",names:{$push:"$name"}}}]).
						when we use on place ($name) to ($$ROOT) then we will get full document information.
				$sum		-> sum the data.
				$sort		-> sort the data in asc/desc manner.
				$size		-> get size of key of array.
				$ifNull		-> check if key not exists ,of array then return null.
				$filter		-> make a filter in field. ($filter:{input:'$fieldname',as:'varname',cond:{writecondition})
				$bucket		-> if we want to do group and take value in multiple condition in group wise.
						Example: db.stu.aggregate([{$match:{age:{$lte:100}}},{$bucket:{groupBy:"$age",boundaries:
                                                	[0,30,70],default:'greater than 100',output:{count:{$sum:1}}}}])
                                                	
			Note-: We can use all operator in aggregation.
			some example-: db.stu.aggregate([{$match:{age:{$gte:50}}},{$group:{_id:'$age',person:{$push:'$name'}}}])

$lookup		->     Lookup operator use for join between table. 
			types of join-: 1)- innerjoin 2)- left outerjoin 3)- right outerjoin 4)- full outerjoin.
			Example:  db.user.aggregate([{$lookup:{from:"domain",localField:"name",foreignField:"uname",as:'userdata'}}])
					
$project	-> 	it allow to customize of aggregation query , which field include and exclude and use expression and rename field.
			Example: db.user.aggregate([{$match:{name:"vinay"}},{$lookup:
				{from:'domain',foreignField:'uname',localField:'name',as:'data'}},{$project:{age:0,name:0,_id:1,data:0}}])	
			1= Which field we have to show.
			0= not show.
			
Capped-collection	-> if we have 10000 data but i want in the collection only have 4(or any number) new inserted data. then we make
                          collection as a capped collection.
                          
                          Example: db.createCollection("order_logs",{capped:true,max:2,size:100000})
                          	order_logs	= collection name.
                          	capped:true	= capped should be true.
                          	max:2		= maximum size of row of collection.
                          	size:100000	= maximum size of data in bytes.
                          	
                          Note:- First inserted document will be delete. and this type of collections order will be maintain.
                          
			
			
	
